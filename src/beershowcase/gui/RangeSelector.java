
package beershowcase.gui;

import beershowcase.utils.FixedPointReal;
import beershowcase.utils.Range;
import javax.swing.JSlider;

/**
 *
 * @author Grzegorz Łoś
 */
public class RangeSelector extends javax.swing.JPanel {

    private FixedPointReal minValue, maxValue;
    private Limits limits;
    private String unitSign;
    private static final char INF = '\u221e';

    public RangeSelector(int min, int max, Limits limits, String unitSign) {
        this.unitSign = unitSign;
        this.limits = limits;
        initComponents();
        setRange(min, max);
    }

    public RangeSelector(FixedPointReal min, FixedPointReal max, Limits limits, String unitSign) {
        this.unitSign = unitSign;
        this.limits = limits;
        initComponents();
        setRange(min, max);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sliderMin = new javax.swing.JSlider();
        sliderMax = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        labelMin = new javax.swing.JLabel();
        labelMax = new javax.swing.JLabel();

        sliderMin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderMinStateChanged(evt);
            }
        });

        sliderMax.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderMaxStateChanged(evt);
            }
        });

        jLabel1.setText("min:");

        jLabel2.setText("max:");

        labelMin.setText("aaaa");

        labelMax.setText("bbbb");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelMin, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                    .addComponent(labelMax, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sliderMin, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                    .addComponent(sliderMax, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sliderMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(labelMin)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelMax))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sliderMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sliderMinStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderMinStateChanged
        adjustIfNecessary(sliderMax, sliderMin.getValue());
        labelMin.setText(makeLabelText(sliderMin.getValue(), false));
    }//GEN-LAST:event_sliderMinStateChanged

    private void sliderMaxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderMaxStateChanged
        adjustIfNecessary(sliderMin, sliderMax.getValue());
        labelMax.setText(makeLabelText(sliderMax.getValue(), true));
    }//GEN-LAST:event_sliderMaxStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel labelMax;
    private javax.swing.JLabel labelMin;
    private javax.swing.JSlider sliderMax;
    private javax.swing.JSlider sliderMin;
    // End of variables declaration//GEN-END:variables

    public final void setRange(int min, int max) {
        if (max < min)
            max = min;
        
        minValue = new FixedPointReal(min, 0);
        maxValue = new FixedPointReal(max, 0);
        setSliderLimits(sliderMin, min);
        setSliderLimits(sliderMax, max);
    }
    
    public final void setRange(FixedPointReal min, FixedPointReal max) {
        if (max.smallerThan(min))
            max = min;
        if (min.pointPos < max.pointPos)
            min = min.toAnotherPointPos(max.pointPos);
        if (max.pointPos < min.pointPos)
            max = max.toAnotherPointPos(min.pointPos);
        
        minValue = min;
        maxValue = max;
        setSliderLimits(sliderMin, (int) min.units);
        setSliderLimits(sliderMax, (int) max.units);
    }
    
    public void reset() {
        sliderMin.setValue((int) minValue.units);
        sliderMax.setValue((int) maxValue.units);
    }

    private void setSliderLimits(JSlider slider, int val) {
        slider.setMinimum((int) minValue.units);
        slider.setMaximum((int) maxValue.units);
        slider.setValue(val);
    }
    
    public FixedPointReal getFromValue() {
        int pp = minValue.pointPos;
        return new FixedPointReal(sliderMin.getValue(), pp);
    }
    
    public FixedPointReal getToValue() {
        int pp = maxValue.pointPos;
        return new FixedPointReal(sliderMax.getValue(), pp);
    }
    
    public Range getRange() {
        if (limits.areBothToInf() && isSetToMaximum() && isSetToMinimum())
            return new Range(Range.Type.INF_INF);
        else if (limits.isRightToInf() && isSetToMaximum())
            return new Range(getFromValue(), Range.Type.VAL_INF);
        else if (limits.isLeftToInf() && isSetToMinimum())
            return new Range(getToValue(), Range.Type.INF_VAL);
        else
            return new Range(getFromValue(), getToValue());
    }
    
    public boolean isSetToMaximum() {
        return sliderMax.getValue() >= maxValue.units;
    }
    
    public boolean isSetToMinimum() {
        return sliderMin.getValue() <= minValue.units;
    }

    private void adjustIfNecessary(JSlider slider, int val) {
        if (sliderMax.getValue() < sliderMin.getValue()) {
            slider.setValue(val);
        }
    }
    
    private String makeLabelText(int valueOnSlider, boolean forMaxSlider) {
        int pp = minValue.pointPos;
        return makeNumberString(
                new FixedPointReal(valueOnSlider, pp), forMaxSlider) + unitSign;
    }
    
    private String makeNumberString(FixedPointReal value, boolean forMaxSlider) {
        if (limits.isRightToInf() && forMaxSlider && value.greaterEq(maxValue))
            return "" + INF;
        if (limits.isLeftToInf() && !forMaxSlider && value.smallerEq(minValue))
            return "-" + INF;
        return value.toString();
    }

    public enum Limits {
        LEFT_TO_INF(true, false), RIGHT_TO_INF(false, true),
        BOTH_TO_INF(true, true), NONE_TO_INF(false, false);

        private Limits(boolean isLeftToInf, boolean isRightToInf) {
            this.isLeftToInf = isLeftToInf;
            this.isRightToInf = isRightToInf;
        }

        private final boolean isLeftToInf, isRightToInf;
        
        private boolean areBothToInf() {
            return isLeftToInf && isRightToInf;
        }

        private boolean isRightToInf() {
            return isRightToInf;
        }

        private boolean isLeftToInf() {
            return isLeftToInf;
        }
    }
}
